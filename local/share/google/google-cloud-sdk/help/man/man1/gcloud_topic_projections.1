
.TH "GCLOUD_TOPIC_PROJECTIONS" 1



.SH "NAME"
.HP
gcloud topic projections \- resource projections supplementary help



.SH "DESCRIPTION"

Most \fBgcloud\fR commands return a list of resources on success. By default
they are pretty\-printed on the standard output. The
\fB\-\-format=\fR\fINAME\fR[\fIATTRIBUTES\fR]\fB(\fR\fIPROJECTION\fR\fB)\fR flag
changes the default output:

\fINAME\fR
.RS 2m
The format name.
.RE
\fIATTRIBUTES\fR
.RS 2m
Format specific attributes. For details run $ gcloud topic formats.
.RE
\fIPROJECTION\fR
.RS 2m
A list of resource keys that selects the data listed. Resource projections are
described in detail below.
.RE
\fIresource keys\fR
.RS 2m
Keys are names for resource resource items. For details run $ gcloud topic
resource\-keys.

.RE

.SH "Projections"

A projection is a list of keys that selects resource data values. Projections
are used in \fB\-\-format\fR flag expressions. For example, the \fBtable\fR
format requires a projection that describes the table columns:

.RS 2m
table(name, network.ip.internal, network.ip.external, uri())
.RE


.SH "Transforms"

A \fBtransform\fR formats resource data values. Each projection key may have
zero or more transform calls:

.RS 2m
_key_._transform_([arg...])...
.RE

This example applies the \fBfoo\fR() and then the \fBbar\fR() transform to the
\fBstatus.time\fR resource value:

.RS 2m
(name, status.time.foo().bar())
.RE

In the descriptions below the argument \fBr\fR is the implicit resource data
value. \fBr\fR is not specified in transform calls.


The builtin transform functions are:

\fBalways\fR(r)
.RS 2m
Marks a transform sequence to always be applied. In some cases transforms are
disabled. Prepending always() to a transform sequence causes the sequence to
always be evaluated.


The arguments are:

\fB\f5r\fR\fR
.RS 2m
A resource.

.RE
For example\f5:\fR
.RS 2m
some_field.always().foo().bar() will always apply foo() and then bar().

.RE
.RE
\fBbasename\fR(r, undefined="")
.RS 2m
Returns the last path component in r.


The arguments are:

\fB\f5r\fR\fR
.RS 2m
A URI or unix/windows file path.
.RE
\fB\f5undefined\fR\fR
.RS 2m
This value is returned if r or the basename is empty.

.RE
.RE
\fBcolor\fR(r, red, yellow, green, blue)
.RS 2m
Colorizes the string value of r. The resource string is searched for an re
pattern match in Roy.G.Biv order. The first pattern that matches colorizes the
resource string with that color.


The arguments are:

\fB\f5r\fR\fR
.RS 2m
A JSON\-serializable object.
.RE
\fB\f5red\fR\fR
.RS 2m
Color red resource value pattern.
.RE
\fB\f5yellow\fR\fR
.RS 2m
Color yellow resource value pattern.
.RE
\fB\f5green\fR\fR
.RS 2m
Color green resource value pattern.
.RE
\fB\f5blue\fR\fR
.RS 2m
Color blue resource value pattern.

.RE
.RE
\fBdate\fR(r, format="%Y\-%m\-%dT%H:%M:%S", unit=1, undefined="", tz)
.RS 2m
Formats r to a strftime() format.


The arguments are:

\fB\f5r\fR\fR
.RS 2m
A timestamp number or an object with 3 or more of these fields: year, month,
day, hour, minute, second, millisecond, microsecond, nanosecond.
.RE
\fB\f5format\fR\fR
.RS 2m
The strftime(3) format.
.RE
\fB\f5unit\fR\fR
.RS 2m
Timestamp r divided by unit yields seconds.
.RE
\fB\f5undefined\fR\fR
.RS 2m
Returns this if r does not contain a valid time.
.RE
\fB\f5tz\fR\fR
.RS 2m
Fixed timezone string, local timezone if None. For example, EST5EDT, US/Pacific,
UTC, WEST.

.RE
.RE
\fBduration\fR(r, unit=1, undefined="")
.RS 2m
Formats r to a duration string.


The arguments are:

\fB\f5r\fR\fR
.RS 2m
A JSON\-serializable object.
.RE
\fB\f5unit\fR\fR
.RS 2m
r divided by unit yields seconds.
.RE
\fB\f5undefined\fR\fR
.RS 2m
Returns this if r/unit is not a valid timestamp.

.RE
.RE
\fBerror\fR(r, message)
.RS 2m
Raises an Error exception that does not generate a stack trace.


The arguments are:

\fB\f5r\fR\fR
.RS 2m
A JSON\-serializable object.
.RE
\fB\f5message\fR\fR
.RS 2m
An error message. If None then r is formatted as the error message.

.RE
.RE
\fBfatal\fR(r, message)
.RS 2m
Raises an InternalError exception that generates a stack trace.


The arguments are:

\fB\f5r\fR\fR
.RS 2m
A JSON\-serializable object.
.RE
\fB\f5message\fR\fR
.RS 2m
An error message. If None then r is formatted as the error message.

.RE
.RE
\fBfirstof\fR(r, args)
.RS 2m
Returns the first non\-empty r.name value for name in args.


The arguments are:

\fB\f5r\fR\fR
.RS 2m
A JSON\-serializable object.
.RE
\fB\f5args\fR\fR
.RS 2m
Names to check for values in r.

.RE
For example\f5:\fR
.RS 2m
x.firstof(bar_foo, barFoo, BarFoo, BAR_FOO) will check x.bar_foo, x.barFoo,
x.BarFoo, and x.BAR_FOO in order for the first non\-empty value.

.RE
.RE
\fBformat\fR(r, fmt, args)
.RS 2m
Formats a sub\-projection of r.


The arguments are:

\fB\f5r\fR\fR
.RS 2m
A JSON\-serializable object.
.RE
\fB\f5fmt\fR\fR
.RS 2m
The format string with {0} ... {nargs\-1} references to the resource key arg
values.
.RE
\fB\f5args\fR\fR
.RS 2m
The resource key args to format. The args values form a projection on r. The
projection symbols and aliases are available in the sub\-projection.

.RE
For example\f5:\fR
.RS 2m
\-\-format='value(format("{0:f.1}/{0:f.1}", q.CPU.default, q.CPU.limit))'

.RE
.RE
\fBgroup\fR(r, args)
.RS 2m
Formats a [...] grouped list. Each group is enclosed in [...]. The first item
separator is ':', subsequent separators are ','. [item1] [item1] ... [item1:
item2] ... [item1: item2] [item1: item2, item3] ... [item1: item2, item3]


The arguments are:

\fB\f5r\fR\fR
.RS 2m
A JSON\-serializable object.
.RE
\fB\f5args\fR\fR
.RS 2m
Optional attribute names to select from the list. Otherwise the string value of
each list item is selected.

.RE
.RE
\fBiso\fR(r, undefined="T")
.RS 2m
Formats r to the numeric ISO time format.


The arguments are:

\fB\f5r\fR\fR
.RS 2m
A JSON\-serializable object.
.RE
\fB\f5undefined\fR\fR
.RS 2m
Returns this if r does not have an isoformat() attribute.

.RE
.RE
\fBlen\fR(r)
.RS 2m
Returns the length of r if r is non\-empty, 0 otherwise.


The arguments are:

\fB\f5r\fR\fR
.RS 2m
A JSON\-serializable object.

.RE
.RE
\fBlist\fR(r, undefined="", separator=",")
.RS 2m
Formats a dict or list into a compact comma separated list.


The arguments are:

\fB\f5r\fR\fR
.RS 2m
A JSON\-serializable object.
.RE
\fB\f5undefined\fR\fR
.RS 2m
Return this if r is empty.
.RE
\fB\f5separator\fR\fR
.RS 2m
The list item separator string.

.RE
.RE
\fBmap\fR(r)
.RS 2m
Applies the next transform in the sequence to each item in list resource r.


The arguments are:

\fB\f5r\fR\fR
.RS 2m
A resource.

.RE
For example\f5:\fR
.RS 2m
list_field.map().foo().bar() applies foo() to each item in list_field and then
bar() to the resulting value. list_field.map().foo().map().bar() applies foo()
to each item in list_field and then bar() to each item in the resulting list.

.RE
.RE
\fBresolution\fR(r, undefined="", transpose=False)
.RS 2m
Formats a human readable XY resolution.


The arguments are:

\fB\f5r\fR\fR
.RS 2m
object, A JSON\-serializable object containing an x/y resolution.
.RE
\fB\f5undefined\fR\fR
.RS 2m
Returns this if a recognizable resolution was not found.
.RE
\fB\f5transpose\fR\fR
.RS 2m
Returns the y/x resolution if True.

.RE
.RE
\fBscope\fR(r, args)
.RS 2m
Gets the /args/ suffix from URI r.


The arguments are:

\fB\f5r\fR\fR
.RS 2m
A URI.
.RE
\fB\f5args\fR\fR
.RS 2m
Optional URI segment names. If not specified then 'regions', 'zones' is assumed.

.RE
For example\f5:\fR
.RS 2m
scope('https://abc/foo/projects/bar/zyx', 'projects') returns 'bar/xyz'.
scope("https://abc/foo/rergions/abc") returns 'abc'.

.RE
.RE
\fBsegment\fR(r, index=\-1, undefined="")
.RS 2m
Returns the index\-th URI path segment in r.


The arguments are:

\fB\f5r\fR\fR
.RS 2m
A URI path.
.RE
\fB\f5index\fR\fR
.RS 2m
The path segment index to return counting from 0.
.RE
\fB\f5undefined\fR\fR
.RS 2m
This value is returned if r or segment index is empty.

.RE
.RE
\fBsize\fR(r, zero="0", units_in, units_out, min=0)
.RS 2m
Formats a human readable size in bytes.


The arguments are:

\fB\f5r\fR\fR
.RS 2m
A size in bytes.
.RE
\fB\f5zero\fR\fR
.RS 2m
Returns this if size==0. Ignored if None.
.RE
\fB\f5units_in\fR\fR
.RS 2m
A unit suffix (only the first character is checked) or unit size. The size of r
is multiplied by this size. The defaults is 1.0.
.RE
\fB\f5units_out\fR\fR
.RS 2m
A unit suffix (only the first character is checked) or unit size. The size of r
is divided by this size. The defaults is 1.0.
.RE
\fB\f5min\fR\fR
.RS 2m
Sizes < min will be listed as "< MIN".

.RE
.RE
\fBuri\fR(r, undefined=".")
.RS 2m
Gets the URI for r.


The arguments are:

\fB\f5r\fR\fR
.RS 2m
A JSON\-serializable object.
.RE
\fB\f5undefined\fR\fR
.RS 2m
Returns this if a the URI for r cannot be determined.

.RE
.RE
\fByesno\fR(r, yes, no="No")
.RS 2m
Returns no if r is empty, yes or r otherwise.


The arguments are:

\fB\f5r\fR\fR
.RS 2m
A JSON\-serializable object.
.RE
\fB\f5yes\fR\fR
.RS 2m
If r is not empty then returns yes or r.
.RE
\fB\f5no\fR\fR
.RS 2m
Returns this string if r is empty.


.RE
.RE
The compute transform functions are:

\fBfirewall_rule\fR(r)
.RS 2m
Returns a compact string describing the firewall rule in r. The compact string
is a comma\-separated list of PROTOCOL:PORT_RANGE items. If a particular
protocol has no port ranges then only the protocol is listed.


The arguments are:

\fB\f5r\fR\fR
.RS 2m
JSON\-serializable object.

.RE
.RE
\fBimage_alias\fR(r)
.RS 2m
Returns a comma\-separated list of alias names for the image in r.


The arguments are:

\fB``\f5r``\fI\fR
.RS 2m
JSON\-serializable object.

.RE
.RE
\fBnext_maintenance\fR(r)
.RS 2m
Returns the timestamps of the next scheduled maintenance or \fR\fR. All
timestamps are assumed to be ISO strings in the same timezone.


The arguments are:

\fB\f5r\fR\fR
.RS 2m
JSON\-serializable object.

.RE
.RE
\fBoperation_http_status\fR(r)
.RS 2m
Returns the HTTP response code of the operation in r.


The arguments are:

\fB\f5r\fR\fR
.RS 2m
JSON\-serializable object.

.RE
.RE
\fBquota\fR(r)
.RS 2m
Formats the quota in r as usage/limit.


The arguments are:

\fB\f5r\fR\fR
.RS 2m
JSON\-serializable object.

.RE
.RE
\fBstatus\fR(r)
.RS 2m
Returns the machine status in r with deprecation information if applicable.


The arguments are:

\fB``\f5r``\fI\fR
.RS 2m
JSON\-serializable object.



\fR
.RE
.RE

.SH "Key Attributes"

Key attributes control formatted output. Each projection key may have zero or
more attributes:

.RS 2m
_key_:_attribute_=_value_...
.RE

where =\fIvalue\fR is omitted for Boolean attributes and no\-\fIattribute\fR
sets the attribute to false. Attribute values may appear in any order, but must
be specified after any transform calls. The attributes are:

\fBalias\fR=\fIALIAS\-NAME\fR
.RS 2m
Sets \fIALIAS\-NAME\fR as an alias for the projection key.

.RE
\fBalign\fR=\fIALIGNMENT\fR
.RS 2m
Specifies the output column data alignment. Used by the \fBtable\fR format. The
alignment values are:

\fBleft\fR
.RS 2m
Left (default).

.RE
\fBcenter\fR
.RS 2m
Center.

.RE
\fBright\fR
.RS 2m
Right.

.RE
.RE
\fBlabel\fR=\fILABEL\fR
.RS 2m
A string value used to label output. Use :label="" or :label=\fI\f5 for no
label. The \fBtable\fR format uses \fRLABEL\fI values as column headings. Also
sets \fRLABEL\fI as an alias for the projection key. The default label is the
the disambiguated right hand parts of the column key name in ANGRY_SNAKE_CASE.

.RE
[no\-]\fBreverse\fR
.RS 2m
Sets the key sort order to descending. \fBno\-reverse\fR resets to the default
ascending order.

.RE
\fBsort\fR=\fRSORT\-ORDER\fI
.RS 2m
An integer counting from 1. Keys with lower sort\-order are sorted first. Keys
with same sort order are sorted left to right.


\fR
.RE

.SH "EXAMPLES"

List a table of instance \fBzone\fR (sorted in descending order) and \fBname\fR
(sorted by \fBname\fR and centered with column heading \fBINSTANCE\fR) and
\fBcreationTimestamp\fR (listed using the \fBstrftime\fR(3) year\-month\-day
format with column heading \fBSTART\fR):

.RS 2m
$ gcloud compute instances list \e
    \-\-format='table(name:sort=2:align=center:label=INSTANCE, zone:\e
sort=1:reverse, creationTimestamp.date("%Y\-%m\-%d"):label=START\e )'
.RE

List only the \fBname\fR, \fBstatus\fR and \fBzone\fR instance resource keys in
YAML format:

.RS 2m
$ gcloud compute instances list \-\-format='yaml(name, status, zone)'
.RE

List only the \fBconfig.account\fR key value(s) in the \fBinfo\fR resource:

.RS 2m
$ gcloud info \-\-format='value(config.account)'
.RE
